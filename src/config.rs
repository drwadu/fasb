pub const PROMPT: &'static str = ":: ";
pub const ACTIVATE_FACETS: &'static str = "+";
pub const ACTIVATE_FACETS_LT: &'static str = "+'";
pub const SHOW_FACETS: &'static str = "?";
pub const COMPUTE_FACETS_SU: &'static str = "!?";
pub const COMPUTE_FACETS: &'static str = "'!?";
pub const FACET_COUNT: &'static str = "#?";
pub const FACET_COUNTS: &'static str = "#??";
pub const FACET_COUNTS_PROJECTING: &'static str = "!#??";
pub const ANSWER_SET_COUNT: &'static str = "#!";
pub const ANSWER_SET_COUNTS: &'static str = "#!!";
pub const ENUMERATE_SOLUTIONS: &'static str = "!";
pub const ENUMERATE_PROJECTED_SOLUTIONS: &'static str = "!*";
pub const SHOW_ROUTE: &'static str = "@";
pub const CLEAR_ROUTE: &'static str = "--";
pub const DEL_LAST: &'static str = "-";
pub const CHANGE_MODE: &'static str = "'";
pub const DISPLAY_MODE: &'static str = ":mode";
pub const PROPOSE_STEP: &'static str = "$";
pub const TAKE_STEP: &'static str = "$$";
pub const SHOW_PROGRAM: &'static str = ":src";
pub const SHOW_ATOMS: &'static str = ":atoms";
pub const FILTER_ATOMS: &'static str = ":filter_atoms";
pub const IS_ATOM: &'static str = ":isatom";
pub const SOE: &'static str = ":soe";
pub const CONTEXT: &'static str = ">";
pub const SIGNIFICANCE: &'static str = "%";
pub const IS_FACET: &'static str = ":?";
pub const IS_FACET_R: &'static str = ":?r";
pub const QUIT: &'static str = ":q";

pub const FILTER_KEYWORD: &'static str = "%filter ";

pub(crate) fn manual() {
    println!("display facet-inducing atoms                                                                 ->  {SHOW_FACETS}");
    println!("display route                                                                                ->  {SHOW_ROUTE}");
    println!("enumerate n=[int] answer sets                                                                ->  {ENUMERATE_SOLUTIONS} n");
    println!("activate facets=[whitespace seperated literals, e.g., a ~b]                                  ->  {ACTIVATE_FACETS} facets"); 
    println!("activate facets=[whitespace seperated literals, e.g., a ~b] and display consequences         ->  {ACTIVATE_FACETS_LT} facets");
    println!("deactivate previous facet                                                                    ->  {DEL_LAST}");
    println!("deactivate all facets                                                                        ->  {CLEAR_ROUTE}");
    //println!("check whether regex-matched atoms are facets                                                 ->  {IS_FACET} regex"); 
    //println!("check whether regex-matched atoms are facets with one consistency check                      ->  {IS_FACET_R} regex"); 
    println!("declare cnf=[e.g., a|~b&c|d] context/query                                                   ->  {CONTEXT} cnf");
    println!("select navigation mode=[{{{{min,max}}#{{f,a,s}}, go}}]                                             ->  {CHANGE_MODE} mode");
    println!("next step in mode                                                                            ->  {PROPOSE_STEP}");
    println!("perform next step in mode                                                                    ->  {TAKE_STEP}");
    println!("compute facets among atoms that match targets=[regex]                                        ->  {COMPUTE_FACETS_SU} targets");
    println!("facet count                                                                                  ->  {FACET_COUNT}");
    println!("facet counts under each facet                                                                ->  {FACET_COUNTS}");
    println!("facet counts under each facet in targets_1=[regex] using projection on targets_2=[regex]     ->  {FACET_COUNTS_PROJECTING} targets_2 targets_1");
    println!("significance of facets=[regex] for some literal=[a or ~a]                                    ->  {SIGNIFICANCE} literal facets");
    println!("answer set count                                                                             ->  {ANSWER_SET_COUNT}");
    println!("answer set counts under each facet                                                           ->  {ANSWER_SET_COUNTS}");
    println!("enumerate representative answer sets regarding targets=[regex] filtered from current facets  ->  {SOE} targets");
    println!("display program                                                                              ->  {SHOW_PROGRAM}");
    println!("display atoms                                                                                ->  {SHOW_ATOMS}");
    println!("display regex-matched atoms                                                                  ->  {FILTER_ATOMS} regex");
    println!("atom check                                                                                   ->  {IS_ATOM}");
    println!("display navigation mode                                                                      ->  {DISPLAY_MODE}");
    println!("quit                                                                                         ->  {QUIT}");
    println!("see documentation for more details");
}
